plugins {
    id 'antlr' // required for java core
    id 'forsydeio.public-module'
//    id 'forsyde-io-java-generator'
//    id "io.freefair.lombok" version "6.5.0.3"
}

//import forsyde.io.java.generator.GenerateForSyDeModelTask

project.ext.niceName = "Java Core"

/*
task clearForSyDeModel(type: Delete) {
    delete 'src-gen/main/java/forsyde/io/java/core', 'src-gen/main/java/forsyde/io/java/typed/viewers'
}
*/
//
//tasks.register("cleanForSyDeModel", Delete) {
//    delete 'src-gen/main/java/forsyde/io/java'
//}
//
//tasks.clean.dependsOn(tasks.cleanForSyDeModel)

//tasks.register('generateForSyDeModel', GenerateForSyDeModelTask) {
//    inputModelDSL = project.ext.stdTraitHierarchyFile
//}

//generateForSyDeModel {
//    inputModelDSL = project.ext.stdTraitHierarchyFile
//}
//
//getAllNamespaces {
//    inputModelDSL = project.ext.stdTraitHierarchyFile
//}


//tasks.generateForSyDeModel.dependsOn clearForSyDeModel
//tasks.build.dependsOn gradle.includedBuild('java-generator').task(':generateForSyDeModel')
//tasks.compileJava.dependsOn gradle.includedBuild('java-generator').task(':generateForSyDeModel')
tasks.sourcesJar.dependsOn generateGrammarSource

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //implementation 'org.slf4j:slf4j-api:1.7.32'
    api group: 'org.jgrapht', name: 'jgrapht-core', version: '[1.5.1,)'
    // these two are intrusive results of lingua franca
    //implementation 'org.eclipse.xtend:org.eclipse.xtend.lib:2.25.0'
    //implementation 'commons-cli:commons-cli:1.5.0'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
    implementation "org.apache.avro:avro:1.11.1"
    // implementation 'com.google.flatbuffers:flatbuffers-java:24.3.25'
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '3.0.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.0'
    antlr 'org.antlr:antlr4:4.10.1'
    implementation 'org.antlr:antlr4-runtime:4.10.1'
    //implementation 'org.ainslec:picocog:1.0.7'

//    compileOnly "org.derive4j:derive4j-annotation:1.1.1"
//    annotationProcessor "org.derive4j:derive4j:1.1.1"

}

generateGrammarSource {
    maxHeapSize = "512m"
    arguments += ['-package', 'forsyde.io.java.adapters.fiodl', '-visitor']
    outputDirectory layout.buildDirectory.dir("generated/${name}/main/java/forsyde/io/java/adapters/fiodl").get().getAsFile()
}

sourceSets {
    main {
        java {
            srcDirs += layout.buildDirectory.dir("generated/generateGrammarSource/main/java")
        }
    }
}
