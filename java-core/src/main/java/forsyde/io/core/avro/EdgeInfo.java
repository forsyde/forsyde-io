/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package forsyde.io.core.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EdgeInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5239361184202564818L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EdgeInfo\",\"namespace\":\"forsyde.io.core.avro\",\"fields\":[{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"target\",\"type\":\"string\"},{\"name\":\"sourcePort\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"targetPort\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"traits\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EdgeInfo> ENCODER =
      new BinaryMessageEncoder<EdgeInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EdgeInfo> DECODER =
      new BinaryMessageDecoder<EdgeInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EdgeInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EdgeInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EdgeInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EdgeInfo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EdgeInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EdgeInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EdgeInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EdgeInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence source;
   private java.lang.CharSequence target;
   private java.lang.CharSequence sourcePort;
   private java.lang.CharSequence targetPort;
   private java.util.List<java.lang.CharSequence> traits;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EdgeInfo() {}

  /**
   * All-args constructor.
   * @param source The new value for source
   * @param target The new value for target
   * @param sourcePort The new value for sourcePort
   * @param targetPort The new value for targetPort
   * @param traits The new value for traits
   */
  public EdgeInfo(java.lang.CharSequence source, java.lang.CharSequence target, java.lang.CharSequence sourcePort, java.lang.CharSequence targetPort, java.util.List<java.lang.CharSequence> traits) {
    this.source = source;
    this.target = target;
    this.sourcePort = sourcePort;
    this.targetPort = targetPort;
    this.traits = traits;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return source;
    case 1: return target;
    case 2: return sourcePort;
    case 3: return targetPort;
    case 4: return traits;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: source = (java.lang.CharSequence)value$; break;
    case 1: target = (java.lang.CharSequence)value$; break;
    case 2: sourcePort = (java.lang.CharSequence)value$; break;
    case 3: targetPort = (java.lang.CharSequence)value$; break;
    case 4: traits = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'target' field.
   * @return The value of the 'target' field.
   */
  public java.lang.CharSequence getTarget() {
    return target;
  }


  /**
   * Sets the value of the 'target' field.
   * @param value the value to set.
   */
  public void setTarget(java.lang.CharSequence value) {
    this.target = value;
  }

  /**
   * Gets the value of the 'sourcePort' field.
   * @return The value of the 'sourcePort' field.
   */
  public java.lang.CharSequence getSourcePort() {
    return sourcePort;
  }


  /**
   * Sets the value of the 'sourcePort' field.
   * @param value the value to set.
   */
  public void setSourcePort(java.lang.CharSequence value) {
    this.sourcePort = value;
  }

  /**
   * Gets the value of the 'targetPort' field.
   * @return The value of the 'targetPort' field.
   */
  public java.lang.CharSequence getTargetPort() {
    return targetPort;
  }


  /**
   * Sets the value of the 'targetPort' field.
   * @param value the value to set.
   */
  public void setTargetPort(java.lang.CharSequence value) {
    this.targetPort = value;
  }

  /**
   * Gets the value of the 'traits' field.
   * @return The value of the 'traits' field.
   */
  public java.util.List<java.lang.CharSequence> getTraits() {
    return traits;
  }


  /**
   * Sets the value of the 'traits' field.
   * @param value the value to set.
   */
  public void setTraits(java.util.List<java.lang.CharSequence> value) {
    this.traits = value;
  }

  /**
   * Creates a new EdgeInfo RecordBuilder.
   * @return A new EdgeInfo RecordBuilder
   */
  public static forsyde.io.core.avro.EdgeInfo.Builder newBuilder() {
    return new forsyde.io.core.avro.EdgeInfo.Builder();
  }

  /**
   * Creates a new EdgeInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EdgeInfo RecordBuilder
   */
  public static forsyde.io.core.avro.EdgeInfo.Builder newBuilder(forsyde.io.core.avro.EdgeInfo.Builder other) {
    if (other == null) {
      return new forsyde.io.core.avro.EdgeInfo.Builder();
    } else {
      return new forsyde.io.core.avro.EdgeInfo.Builder(other);
    }
  }

  /**
   * Creates a new EdgeInfo RecordBuilder by copying an existing EdgeInfo instance.
   * @param other The existing instance to copy.
   * @return A new EdgeInfo RecordBuilder
   */
  public static forsyde.io.core.avro.EdgeInfo.Builder newBuilder(forsyde.io.core.avro.EdgeInfo other) {
    if (other == null) {
      return new forsyde.io.core.avro.EdgeInfo.Builder();
    } else {
      return new forsyde.io.core.avro.EdgeInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for EdgeInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EdgeInfo>
    implements org.apache.avro.data.RecordBuilder<EdgeInfo> {

    private java.lang.CharSequence source;
    private java.lang.CharSequence target;
    private java.lang.CharSequence sourcePort;
    private java.lang.CharSequence targetPort;
    private java.util.List<java.lang.CharSequence> traits;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(forsyde.io.core.avro.EdgeInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.target)) {
        this.target = data().deepCopy(fields()[1].schema(), other.target);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.sourcePort)) {
        this.sourcePort = data().deepCopy(fields()[2].schema(), other.sourcePort);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.targetPort)) {
        this.targetPort = data().deepCopy(fields()[3].schema(), other.targetPort);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.traits)) {
        this.traits = data().deepCopy(fields()[4].schema(), other.traits);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing EdgeInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(forsyde.io.core.avro.EdgeInfo other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.target)) {
        this.target = data().deepCopy(fields()[1].schema(), other.target);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sourcePort)) {
        this.sourcePort = data().deepCopy(fields()[2].schema(), other.sourcePort);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.targetPort)) {
        this.targetPort = data().deepCopy(fields()[3].schema(), other.targetPort);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.traits)) {
        this.traits = data().deepCopy(fields()[4].schema(), other.traits);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.source = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder clearSource() {
      source = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'target' field.
      * @return The value.
      */
    public java.lang.CharSequence getTarget() {
      return target;
    }


    /**
      * Sets the value of the 'target' field.
      * @param value The value of 'target'.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder setTarget(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.target = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'target' field has been set.
      * @return True if the 'target' field has been set, false otherwise.
      */
    public boolean hasTarget() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'target' field.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder clearTarget() {
      target = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourcePort' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourcePort() {
      return sourcePort;
    }


    /**
      * Sets the value of the 'sourcePort' field.
      * @param value The value of 'sourcePort'.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder setSourcePort(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sourcePort = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sourcePort' field has been set.
      * @return True if the 'sourcePort' field has been set, false otherwise.
      */
    public boolean hasSourcePort() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sourcePort' field.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder clearSourcePort() {
      sourcePort = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'targetPort' field.
      * @return The value.
      */
    public java.lang.CharSequence getTargetPort() {
      return targetPort;
    }


    /**
      * Sets the value of the 'targetPort' field.
      * @param value The value of 'targetPort'.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder setTargetPort(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.targetPort = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'targetPort' field has been set.
      * @return True if the 'targetPort' field has been set, false otherwise.
      */
    public boolean hasTargetPort() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'targetPort' field.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder clearTargetPort() {
      targetPort = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'traits' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getTraits() {
      return traits;
    }


    /**
      * Sets the value of the 'traits' field.
      * @param value The value of 'traits'.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder setTraits(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.traits = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'traits' field has been set.
      * @return True if the 'traits' field has been set, false otherwise.
      */
    public boolean hasTraits() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'traits' field.
      * @return This builder.
      */
    public forsyde.io.core.avro.EdgeInfo.Builder clearTraits() {
      traits = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EdgeInfo build() {
      try {
        EdgeInfo record = new EdgeInfo();
        record.source = fieldSetFlags()[0] ? this.source : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.target = fieldSetFlags()[1] ? this.target : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sourcePort = fieldSetFlags()[2] ? this.sourcePort : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.targetPort = fieldSetFlags()[3] ? this.targetPort : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.traits = fieldSetFlags()[4] ? this.traits : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EdgeInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<EdgeInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EdgeInfo>
    READER$ = (org.apache.avro.io.DatumReader<EdgeInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.source);

    out.writeString(this.target);

    if (this.sourcePort == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.sourcePort);
    }

    if (this.targetPort == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.targetPort);
    }

    long size0 = this.traits.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.traits) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);

      this.target = in.readString(this.target instanceof Utf8 ? (Utf8)this.target : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.sourcePort = null;
      } else {
        this.sourcePort = in.readString(this.sourcePort instanceof Utf8 ? (Utf8)this.sourcePort : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.targetPort = null;
      } else {
        this.targetPort = in.readString(this.targetPort instanceof Utf8 ? (Utf8)this.targetPort : null);
      }

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.traits;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("traits").schema());
        this.traits = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.source = in.readString(this.source instanceof Utf8 ? (Utf8)this.source : null);
          break;

        case 1:
          this.target = in.readString(this.target instanceof Utf8 ? (Utf8)this.target : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sourcePort = null;
          } else {
            this.sourcePort = in.readString(this.sourcePort instanceof Utf8 ? (Utf8)this.sourcePort : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.targetPort = null;
          } else {
            this.targetPort = in.readString(this.targetPort instanceof Utf8 ? (Utf8)this.targetPort : null);
          }
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.traits;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("traits").schema());
            this.traits = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










