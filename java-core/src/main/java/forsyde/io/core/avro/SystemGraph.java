/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package forsyde.io.core.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SystemGraph extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4977319494883011225L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SystemGraph\",\"namespace\":\"forsyde.io.core.avro\",\"fields\":[{\"name\":\"vertices\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Vertex\",\"fields\":[{\"name\":\"identifier\",\"type\":\"string\"},{\"name\":\"ports\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"traits\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"properties\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"VertexProperty\",\"fields\":[{\"name\":\"value\",\"type\":[\"int\",\"long\",\"float\",\"double\",\"string\",{\"type\":\"array\",\"items\":\"VertexProperty\"},{\"type\":\"map\",\"values\":\"VertexProperty\"}]}]},\"default\":{}}}]},\"default\":[]}},{\"name\":\"edges\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EdgeInfo\",\"fields\":[{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"target\",\"type\":\"string\"},{\"name\":\"sourcePort\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"targetPort\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"traits\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}}]},\"default\":[]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SystemGraph> ENCODER =
      new BinaryMessageEncoder<SystemGraph>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SystemGraph> DECODER =
      new BinaryMessageDecoder<SystemGraph>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SystemGraph> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SystemGraph> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SystemGraph> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SystemGraph>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SystemGraph to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SystemGraph from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SystemGraph instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SystemGraph fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<forsyde.io.core.avro.Vertex> vertices;
   private java.util.List<forsyde.io.core.avro.EdgeInfo> edges;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SystemGraph() {}

  /**
   * All-args constructor.
   * @param vertices The new value for vertices
   * @param edges The new value for edges
   */
  public SystemGraph(java.util.List<forsyde.io.core.avro.Vertex> vertices, java.util.List<forsyde.io.core.avro.EdgeInfo> edges) {
    this.vertices = vertices;
    this.edges = edges;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return vertices;
    case 1: return edges;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: vertices = (java.util.List<forsyde.io.core.avro.Vertex>)value$; break;
    case 1: edges = (java.util.List<forsyde.io.core.avro.EdgeInfo>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'vertices' field.
   * @return The value of the 'vertices' field.
   */
  public java.util.List<forsyde.io.core.avro.Vertex> getVertices() {
    return vertices;
  }


  /**
   * Sets the value of the 'vertices' field.
   * @param value the value to set.
   */
  public void setVertices(java.util.List<forsyde.io.core.avro.Vertex> value) {
    this.vertices = value;
  }

  /**
   * Gets the value of the 'edges' field.
   * @return The value of the 'edges' field.
   */
  public java.util.List<forsyde.io.core.avro.EdgeInfo> getEdges() {
    return edges;
  }


  /**
   * Sets the value of the 'edges' field.
   * @param value the value to set.
   */
  public void setEdges(java.util.List<forsyde.io.core.avro.EdgeInfo> value) {
    this.edges = value;
  }

  /**
   * Creates a new SystemGraph RecordBuilder.
   * @return A new SystemGraph RecordBuilder
   */
  public static forsyde.io.core.avro.SystemGraph.Builder newBuilder() {
    return new forsyde.io.core.avro.SystemGraph.Builder();
  }

  /**
   * Creates a new SystemGraph RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SystemGraph RecordBuilder
   */
  public static forsyde.io.core.avro.SystemGraph.Builder newBuilder(forsyde.io.core.avro.SystemGraph.Builder other) {
    if (other == null) {
      return new forsyde.io.core.avro.SystemGraph.Builder();
    } else {
      return new forsyde.io.core.avro.SystemGraph.Builder(other);
    }
  }

  /**
   * Creates a new SystemGraph RecordBuilder by copying an existing SystemGraph instance.
   * @param other The existing instance to copy.
   * @return A new SystemGraph RecordBuilder
   */
  public static forsyde.io.core.avro.SystemGraph.Builder newBuilder(forsyde.io.core.avro.SystemGraph other) {
    if (other == null) {
      return new forsyde.io.core.avro.SystemGraph.Builder();
    } else {
      return new forsyde.io.core.avro.SystemGraph.Builder(other);
    }
  }

  /**
   * RecordBuilder for SystemGraph instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SystemGraph>
    implements org.apache.avro.data.RecordBuilder<SystemGraph> {

    private java.util.List<forsyde.io.core.avro.Vertex> vertices;
    private java.util.List<forsyde.io.core.avro.EdgeInfo> edges;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(forsyde.io.core.avro.SystemGraph.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.vertices)) {
        this.vertices = data().deepCopy(fields()[0].schema(), other.vertices);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.edges)) {
        this.edges = data().deepCopy(fields()[1].schema(), other.edges);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing SystemGraph instance
     * @param other The existing instance to copy.
     */
    private Builder(forsyde.io.core.avro.SystemGraph other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.vertices)) {
        this.vertices = data().deepCopy(fields()[0].schema(), other.vertices);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.edges)) {
        this.edges = data().deepCopy(fields()[1].schema(), other.edges);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'vertices' field.
      * @return The value.
      */
    public java.util.List<forsyde.io.core.avro.Vertex> getVertices() {
      return vertices;
    }


    /**
      * Sets the value of the 'vertices' field.
      * @param value The value of 'vertices'.
      * @return This builder.
      */
    public forsyde.io.core.avro.SystemGraph.Builder setVertices(java.util.List<forsyde.io.core.avro.Vertex> value) {
      validate(fields()[0], value);
      this.vertices = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'vertices' field has been set.
      * @return True if the 'vertices' field has been set, false otherwise.
      */
    public boolean hasVertices() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'vertices' field.
      * @return This builder.
      */
    public forsyde.io.core.avro.SystemGraph.Builder clearVertices() {
      vertices = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'edges' field.
      * @return The value.
      */
    public java.util.List<forsyde.io.core.avro.EdgeInfo> getEdges() {
      return edges;
    }


    /**
      * Sets the value of the 'edges' field.
      * @param value The value of 'edges'.
      * @return This builder.
      */
    public forsyde.io.core.avro.SystemGraph.Builder setEdges(java.util.List<forsyde.io.core.avro.EdgeInfo> value) {
      validate(fields()[1], value);
      this.edges = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'edges' field has been set.
      * @return True if the 'edges' field has been set, false otherwise.
      */
    public boolean hasEdges() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'edges' field.
      * @return This builder.
      */
    public forsyde.io.core.avro.SystemGraph.Builder clearEdges() {
      edges = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SystemGraph build() {
      try {
        SystemGraph record = new SystemGraph();
        record.vertices = fieldSetFlags()[0] ? this.vertices : (java.util.List<forsyde.io.core.avro.Vertex>) defaultValue(fields()[0]);
        record.edges = fieldSetFlags()[1] ? this.edges : (java.util.List<forsyde.io.core.avro.EdgeInfo>) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SystemGraph>
    WRITER$ = (org.apache.avro.io.DatumWriter<SystemGraph>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SystemGraph>
    READER$ = (org.apache.avro.io.DatumReader<SystemGraph>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










