plugins {
  id 'maven-publish'
  id 'signing'
  id 'java'
  id 'groovy' // mainly for examples
  id 'java-library'
  id 'idea'
  id 'eclipse'
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
  id "com.github.mrsarm.jshell.plugin" version "1.1.0"
  id "com.palantir.git-version" version "3.0.0"
}

// due to how maven central works, the groupId must be the same as the
// website which we host
group = 'io.github.forsyde'
archivesBaseName = project.name
if (file(".git").exists()) {
  version = gitVersion().substring(1).replace(".dirty", "")
} else {
  version = "latest"
}
project.ext.niceName = "Java Parent"


tasks.register('getVersion') {
    doFirst {
        println version
    }
}


// In this section you declare where to find the dependencies of your project
repositories {
  // Use 'jcenter' for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
  testImplementation('org.junit.jupiter:junit-jupiter:5.9.0')

  //testImplementation 'junit:junit:4.13.2'

  testImplementation project(":java-core")
  testImplementation project(":java-libforsyde")
  testImplementation project(":java-graphviz")
  testImplementation project(":java-bridge-sdf3")
  testImplementation project(":java-bridge-forsyde-systemc")
//  testImplementation project(":java-bridge-forsyde-shallow")
}

test {
  useJUnitPlatform()
}

compileJava {
  sourceCompatibility = JavaVersion.VERSION_17
}

compileTestJava {
  sourceCompatibility = JavaVersion.VERSION_17
}

sourceSets {
  test {
    groovy {
      srcDirs += ['examples/programmatic/groovy']
    }
    java {
      srcDirs += ['examples/programmatic/java', 'examples']
    }
  }
}

// has to be outside so that all projects get the root trait hierarchy
def stdTraitHierarchyFile = file("std_trait_hierarchy.traitdsl")
allprojects {
  project.ext.stdTraitHierarchyFile = stdTraitHierarchyFile
}

java {
  withSourcesJar()
  withJavadocJar()
  modularity.inferModulePath = true
}

//subprojects {
//
//  apply plugin: 'java'
//  apply plugin: 'idea'
//  apply plugin: 'eclipse'
//  apply plugin: 'publishing'
//  apply plugin: 'signing'
//  apply plugin: 'maven-publish'
//
//  group = 'io.github.forsyde'
//  archivesBaseName = rootProject.name + '-' + project.name
//  version = rootProject.version
//
//  repositories {
//    mavenCentral()
//  }
//
//  compileJava {
//    sourceCompatibility = JavaVersion.VERSION_17
//  }
//
//  compileTestJava {
//    sourceCompatibility = JavaVersion.VERSION_17
//  }
//
//
//  publishing {
//    publications {
//      mavenJava(MavenPublication) {
//        artifactId = archivesBaseName
//        from components.java
//        pom {
//          name = "ForSyDe IO " + project.niceName
//          description = "ForSyDe IO " + project.niceName + " (+JVM) supporting library"
//          url = 'https://github.com/forsyde/forsyde-io'
//          packaging = 'jar'
//          scm {
//            connection = 'scm:git:https://github.com/forsyde/forsyde-io.git'
//            developerConnection = 'scm:git:git@github.com:forsyde/forsyde-io.git'
//            url = 'https://github.com/forsyde/forsyde-io'
//          }
//          licenses {
//            license {
//              name = 'The MIT License'
//              url = 'https://choosealicense.com/licenses/mit/'
//            }
//          }
//          developers {
//            developer {
//              id = 'Jordao'
//              name = 'Rodolfo Jordao'
//              email = 'jordao@kth.se'
//            }
//          }
//        }
//      }
////      gpr(MavenPublication) {
////        from(components.java)
////      }
//    }
//    repositories {
//      maven {
//        name = 'OSSRH'
//        url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
//        credentials {
//          username = rootProject.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('MAVEN_USERNAME') ?: System.getenv('OSSRH_USERNAME') ?: ''
//          password = rootProject.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('MAVEN_PASSWORD') ?: System.getenv('OSSRH_PASSWORD') ?: ''
//        }
//      }
////      maven {
////        name = "GitHubPackages"
////        url = uri("https://maven.pkg.github.com/forsyde/forsyde-io")
////        credentials {
////          username = System.getenv("GITHUB_ACTOR")
////          password = System.getenv("GITHUB_TOKEN")
////        }
////      }
//    }
//  }
//
////  plugins.withType(JavaPlugin).configureEach {
////    java {
////      modularity.inferModulePath = true
////    }
////  }
//
//  java {
//    withSourcesJar()
//    withJavadocJar()
//    modularity.inferModulePath = true
//  }
//
//  artifacts {
//    archives javadocJar, sourcesJar
//  }
//
//  signing {
//    // small hack to work offline or online
//    sign publishing.publications.mavenJava
//    sign configurations.archives
//    if (rootProject.hasProperty('signing.useGpgCommand')) {
//        useGpgCmd()
//    } else {
//        useInMemoryPgpKeys(
//                System.getenv('GPG_SIGNING_KEY') ?: rootProject.findProperty('signing.gnupg.key'),
//                System.getenv('GPG_SIGNING_PASSWORD') ?: rootProject.findProperty('signing.gnupg.password') ?: '' //default to an empty password
//        )
//    }
//  }
//
////  project.tasks.publish.dependsOn tasks.signArchives
////  project.tasks.named('publishMavenJavaPublicationToSonatypeRepository').dependsOn tasks.signArchives
////  project.tasks.named('publishMavenJavaPublicationToOSSRHRepository').dependsOn tasks.signArchives
////  if (project.tasks.publish.enabled) {
////  }
//
//}



nexusPublishing {
  repositories {
    sonatype {
      username = rootProject.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv('MAVEN_USERNAME') ?: System.getenv('OSSRH_USERNAME') ?: ''
      password = rootProject.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv('MAVEN_PASSWORD') ?: System.getenv('OSSRH_PASSWORD') ?: ''
    }
  }
}
